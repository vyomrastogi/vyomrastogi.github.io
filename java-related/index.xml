<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Related on VR</title>
    <link>/java-related/</link>
    <description>Recent content in Java Related on VR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 28 Jun 2020 20:17:07 -0400</lastBuildDate>
    
	<atom:link href="/java-related/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basics</title>
      <link>/java-related/basics/</link>
      <pubDate>Sun, 28 Jun 2020 20:19:10 -0400</pubDate>
      
      <guid>/java-related/basics/</guid>
      <description>Java Java is a high level programming language. Main characteristics include
 robust secure platform/os independent object-oriented multi-threaded portable (read-once-write-anywhere) etc.  Java requires both compiler and interpretor to run.
The compiler converts the source code into byte code. The interpretor interprets this bytecode and excutes the application/logic. Since java is interpreted language, it is platform independent
Java Virtual Machine or JVM provides an environment to support execution of java bytecode.</description>
    </item>
    
    <item>
      <title>Java Memory Management</title>
      <link>/java-related/java-memory-management/</link>
      <pubDate>Sat, 04 Jul 2020 21:21:58 -0400</pubDate>
      
      <guid>/java-related/java-memory-management/</guid>
      <description>The Stack Memory  There can be multiple stacks In general in a stack data structure, as new elements are added the elements are pushed down in stack, while popping the first element is pushed out first. First in Last Out datastructure. Java store local variables of a class or method in stack, and are popped off the stack when it encounters end of function block or class block In general the variables stored in stack have very short lifetime.</description>
    </item>
    
    <item>
      <title>Java Garbage Collection</title>
      <link>/java-related/java-garbage-collection/</link>
      <pubDate>Sat, 04 Jul 2020 21:23:27 -0400</pubDate>
      
      <guid>/java-related/java-garbage-collection/</guid>
      <description>Java avoids memory leakage by
 running on a java virtual machine it adopts a garbage collection strategy: Any object which is not reachable from stack memory are eligible for garbage collection -System.gc() is a suggestion to JVM to run garbage collection, and not a gaurantee that all objects will be garbage collected. Usually it is not possible to have memory leaks from jvm to os, but sometimes there can be a soft leak.</description>
    </item>
    
    <item>
      <title>Jit Compiler</title>
      <link>/java-related/jit-compiler/</link>
      <pubDate>Sun, 19 Jul 2020 23:55:40 -0400</pubDate>
      
      <guid>/java-related/jit-compiler/</guid>
      <description>How to find which methods are being compiled to native byte code by compiler.
 By running the class with flag *PrintCompilation * turned on.-XX:+PrintCompilation    There are two level of compiler in java C1 and C2
 On the basis of number of times a code block is used, it keeps on getting compiled at a more deeper tier. The first three level of compilation are done by C1 Compiler The C2 Compiler, compiles the code to native byte code as well places the code in code cache, hence even faster code execution.</description>
    </item>
    
  </channel>
</rss>